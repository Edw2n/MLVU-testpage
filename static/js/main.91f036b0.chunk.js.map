{"version":3,"sources":["Question.js","App.js","reportWebVitals.js","index.js"],"names":["Question","number","setAnswer","rootDir","ids","Array","from","keys","React","useEffect","itemClick","a","d3","this","classed","data","svg","attr","style","selectAll","remove","append","enter","d","parseInt","on","console","log","drawGrid","className","src","alt","id","App","nueron_list","madryRootDirs","map","item","lucentRootDirs","rootDirs","questionNum","length","useState","reduce","acc","curr","totalInfo","setTotalInfo","defaultInfo","userInfo","setUserInfo","updateInfoToggle","prevState","includes","filter","Object","key","width","type","value","onChange","event","target","updateUserInfo","onClick","notOK","forEach","push","every","alert","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91f036b0.chunk.js","sourcesContent":["import './Question.css';\r\nimport React from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nfunction Question({number,setAnswer,rootDir}) {\r\n  let ids = Array.from(Array(9).keys());\r\n\r\n  React.useEffect(() => {\r\n\r\n    console.log('in useEffect');\r\n\r\n    async function drawGrid() {\r\n      // TODO draw the map using d3\r\n      const svg = d3\r\n      .selectAll(`#Options_${number}`);\r\n      let w = 90;\r\n      let h = 90;\r\n\r\n      function itemClick(){\r\n        d3\r\n          .select(this)\r\n          .classed('clicked',!d3.select(this).classed('clicked'))\r\n          \r\n        setAnswer(number, d3.select(this).data()[0]+1)\r\n        \r\n      }  \r\n\r\n      svg\r\n        .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\r\n        .style(\"background-color\", \"red\")\r\n        .attr(\"viewBox\", `0 0 ${w} ${h}`)\r\n        .classed(\"svg-content\", true)\r\n        .selectAll('*').remove();\r\n\r\n        svg.append(\"defs\")\r\n        .selectAll(\"pattern\")\r\n        .data(ids)\r\n        .enter()\r\n        .append('pattern')\r\n        .attr(\"id\", (d)=>`img_${number}_${d}`)\r\n        .attr(\"width\",\"100%\")\r\n        .attr('height',\"100%\")\r\n        .attr(\"patternContentUnits\", \"objectBoundingBox\")\r\n        .append(\"image\")\r\n        .attr(\"height\",\"1\") // value is ratio : \"image height /pattern height\"\r\n        .attr(\"width\",\"1\") // value is ratio : \"image widht /pattern width\"\r\n        .attr(\"xlink:href\", // use square size image\r\n            (d)=>`${rootDir}/option${d+1}.png`);\r\n\r\n      svg.append('g')\r\n      .selectAll('rect')\r\n      .data(ids)\r\n      .enter()\r\n      .append('rect')\r\n      .attr('id', (d) => `rect_${number}_${d}`)\r\n      .attr('x', (d) => parseInt(d/3)*30)\r\n      .attr('y', (d) => (d % 3) * 30)\r\n      .attr('width', 30)\r\n      .attr('height', 30)\r\n      .style(\"fill\", // use square size image\r\n                (d)=>`url(#img_${number}_${d})`)\r\n      .on('click', itemClick)\r\n    };\r\n    drawGrid();\r\n\r\n\r\n  },[]);\r\n  return (\r\n    <div className=\"Question\">\r\n      <p>Question {number}</p>\r\n      <div className='Container'>\r\n        <img src={rootDir+'/fv.png'} className=\"Target-FV\" alt=\"logo\" />\r\n        <div className=\"Option-box\">\r\n          <svg id={'Options_'+number} className='Options'></svg>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n","import './App.css';\nimport Question from './Question.js';\nimport React, { useState } from 'react';\n\nfunction App() {\n\n  let nueron_list = [1295,1331,1472,1888,203,322,333,414,448,650]\n  let madryRootDirs = nueron_list.map(item => {\n    return 'Experiment1/nueron_'+(item)+'/Lucent';\n  })\n\n  let lucentRootDirs = nueron_list.map(item => {\n    return 'Experiment1/nueron_'+(item)+'/Madry';\n  })\n\n  let rootDirs = [...madryRootDirs,...lucentRootDirs]\n\n  let questionNum = rootDirs.length\n  const [totalInfo, setTotalInfo] = useState(\n    Array.from(Array(questionNum).keys()).reduce((acc, curr) => (acc[curr + 1] = [], acc), {})\n  )\n\n  let defaultInfo = {\n    'name': '',\n    'age': '',\n    'others': ''\n  }\n\n  const [userInfo, setUserInfo] = useState(defaultInfo)\n\n  function updateInfoToggle(number, data) {\n    setTotalInfo(prevState => ({\n      ...prevState,\n      [number]: prevState[number].includes(data) ? prevState[number].filter(d => d !== data) : [...prevState[number], data]\n    })\n    );\n  }\n\n  function updateUserInfo(key, event) {\n    setUserInfo(prevState => ({\n      ...prevState,\n      [key]: event.target.value\n    }))\n\n  }\n\n  function submit() {\n    let notOK = [] // totalInfo update 할때 notOK 계산해 놓는게 나으려나\n\n    Object.keys(totalInfo).forEach(function (item) {\n      if (totalInfo[item].length !== 3) {\n        notOK.push(item)\n      }\n    })\n\n    if (Object.keys(totalInfo).every(item => totalInfo[item].length == 3)) {\n\n      console.log('true')\n      // const writeJsonFile = require('write-json-file');\n\n      //   (async () => {\n      //     await writeJsonFile('test.json', totalInfo);\n      //   })();\n      // } else {\n      //   console.log(false)\n    }\n\n    return alert(\n      JSON.stringify(userInfo) + '\\n'\n      + `${notOK.length > 0 ? 'pick only 3 options: ' + notOK : 'All Done!!!!'}`\n      + '\\n' + JSON.stringify(totalInfo)\n    )\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Interpretability Test\n        </p>\n      </header>\n\n      <div className ='userInfoForm'>\n      {Object.keys(defaultInfo).map(key => {\n        console.log(key)\n        return (<div className='Input-Row'>\n          <text style={{width:'60px'}}> {key} </text>\n          <input\n            type=\"text\"\n            value={userInfo[key]}\n            onChange={event => updateUserInfo(key, event)}\n          />\n        </div>);\n      })}\n      </div>\n\n      {Array.from(Array(questionNum).keys()).map(item => {\n        return (<div>\n          {/* {totalInfo[item + 1]} */}\n          <Question number={item + 1} setAnswer={updateInfoToggle} rootDir={rootDirs[item]}></Question>\n        </div>);\n      })}\n      <button onClick={submit}>Submit</button>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}